#!/bin/bash

PAGE=1
[[ $PAGE < 0 ]] && PAGE=1
FZF="fzf --cycle --no-info --layout=reverse --no-preview"
ROFI="rofi -dmenu -theme gruvbox-dark -i -matching fuzzy"
DOWNLAOD_DIR="$HOME/Documents/Anime"
LOGFILE="$HOME/.cache/anime_watch_history"
[[ -z "$LOGFILE" ]] && LW="No Watch History!" || LW="$(cat $LOGFILE)"

EP=1
NP=""
PP=""

scrape (){

  S_QUERY="$(echo "$query" | sed 's/[[:space:]]/+/g')"

  URL="https://aniswim-api.herokuapp.com/search?q=$S_QUERY&page=$PAGE" 
  [[ $S_QUERY = "-l"* ]] && URL="https://aniswim-api.herokuapp.com/latest&page=$PAGE"  
  [[ $S_QUERY = "-r"* ]] &&  URL="https://aniswim-api.herokuapp.com/recent&page=$PAGE"  

  S_QUERY="$(echo "$S_QUERY" | sed 's/-l//g' | sed 's/-r//g'  | sed 's/[[:space:]]/+/g')"

  [[ $PAGE = 1 ]] && SPG="\n0 Next Page" || SPG="\n0 Next_Page\n-1 Previous Page"


  [[ "$(echo "$MENU" | awk '{print $1}')" = "rofi" ]] && MENU="$ROFI -p Anime(Page:$PAGE/$(echo "Search:$S_QUERY" | sed 's/+/-/g'))"

  [[ "$(echo "$MENU" | awk '{print $1}')" = "fzf" ]] && MENU="$FZF --header=Anime(Page:$PAGE/$(echo "Search:$S_QUERY" | sed 's/+/-/g')) --header-first --no-preview"


  [[ $NP = "yes" ]] || [[ $PP = "yes" ]] && select_anime=$select_anime || \
select_anime=$(echo -ne "$(curl -s $URL | jq .'[] | .title' | sed 's/"//g' | cat -n | sed 's/^[ \t]*//g' | sed 's/[[:space:]]/ /g' )$SPG " | $MENU |  awk '{print $1}')


  [[ -z $select_anime ]] && echo "No Anime Selected!" && exit 
  [[ $select_anime == 0 ]] && PAGE=$(($PAGE+1)) && scrape
  [[ $select_anime == -1 ]] && PAGE=$(($PAGE-1)) && scrape
  
  select_animeId=$(curl -s $URL | jq .'[] | .animeID' |  sed 's/"//g' | head -n$select_anime | tail -n1  )


  [[ $NP = "yes" ]] && EP=$(($EP+1))
  [[ $PP = "yes" ]] && EP=$(($EP-1))

  get_anime_data_raw=$(curl -s "https://aniswim-api.herokuapp.com/anime?id=$select_animeId&ep=$EP")

  total_ep=$(echo $get_anime_data_raw | jq .'total_ep' | sed 's/"//g')
  title=$(echo $get_anime_data_raw | jq .'title' | sed 's/"//g' | sed 's/[[:space:]]/-/g')
  anime_type=$(echo $get_anime_data_raw | jq .'anime_type' | sed 's/"//g' | sed 's/[[:space:]]/-/g')

  ep_list=""

  for ((i=1; i<=$total_ep; i++))
  do
    ep_list+=$(echo -ne "$title-Episode-$i "  )
  done

  [[ "$(echo "$MENU" | awk '{print $1}')" = "rofi" ]] && MENU="$ROFI -p Anime(Title:$title/Total_Episode:$total_ep/$anime_type)"
  [[ "$(echo "$MENU" | awk '{print $1}')" = "fzf" ]] && MENU="$FZF --header=Anime(Title:$title/Total_Episode:$total_ep/$anime_type) --header-first --no-preview"
  
  if [[ $NP != "yes" ]] && [[ $PP != "yes" ]]; then
  select_episode=$( echo $ep_list | sed 's/[[:space:]]/\n/g' | cat -n | sed 's/^[ \t]*//g' | sed 's/[[:space:]]/ /g' | $MENU | awk '{print $1}')
  fi
  
  [[ -z $select_episode ]] && echo "No Episode Selected!" && exit
   
 [[ ! -z $select_episode ]] && [[ $select_episode > 1 ]] && EP=$select_episode && get_anime_data_raw=$(curl -s "https://aniswim-api.herokuapp.com/anime?id=$select_animeId&ep=$EP")

  video_link_default=$(echo $get_anime_data_raw | jq .'video_links | .animixplay_link' )
  
  fembed_id=$(echo $get_anime_data_raw | jq .'video_links | .fembed_id ' | sed 's/"//g')

  check_fembed=$(curl -A "Mozilla/5.0 (X11; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/100.0" -s -X POST "https://fembed-hd.com/api/source/$fembed_id" -H "x-requested-with:XMLHttpRequest" |  jq .'success' )

  [[ $check_fembed != false ]] && fembed_link=$(curl -A "Mozilla/5.0 (X11; Linux x86_64; rv:99.0) Gecko/20100101 Firefox/100.0" -s -X POST "https://fembed-hd.com/api/source/$fembed_id" -H "x-requested-with:XMLHttpRequest" | jq .'data' )

  [[ ! -z $fembed_link ]] &&  video_link_=$(echo $fembed_link | jq .'[] | .file ') && \
    video_labels=$(echo $fembed_link | jq .'[] | .label ' | cat -n  | sed 's/^[ \t]*//g' | sed 's/[[:space:]]/ /g' | sed 's/"//g' ) && \
    LINK1=$(echo $video_link_ | sed 's/[[:space:]]/\n/g' | sed 's/"//g' | head -n1 | tail -n1) && \
    LINK2=$(echo $video_link_ | sed 's/[[:space:]]/\n/g' | sed 's/"//g' | head -n2 | tail -n1) && \
    LINK3=$(echo $video_link_ | sed 's/[[:space:]]/\n/g' | sed 's/"//g' | head -n3 | tail -n1)



if [[ $check_fembed = true ]]; then
[[ "$(echo "$MENU" | awk '{print $1}')" = "rofi" ]] && MENU="$ROFI -p Anime(Title:$title/Episode:$EP/Select_Quality)"
[[ "$(echo "$MENU" | awk '{print $1}')" = "fzf" ]] && MENU="$FZF --header=Anime(Title:$title/Episode:$EP/Select_Quality) --header-first --no-preview"
select_quality=$(echo -ne "$video_labels\n4 Default" | $MENU | awk '{print $1}')  
action=$(echo -ne "Play\nDownload" | $MENU | awk '{print $1}')
else 
[[ "$(echo "$MENU" | awk '{print $1}')" = "rofi" ]] && MENU="$ROFI -p Anime(Title:$title/Episode:$EP/Selected_Default_Quality)"
[[ "$(echo "$MENU" | awk '{print $1}')" = "fzf" ]] && MENU="$FZF --header=Anime(Title:$title/Episode:$EP/Selected_Default_Quality) --header-first --no-preview"
select_quality=4 
action=$(echo -ne "Play\nDownload" | $MENU | awk '{print $1}')
fi
 
[[ -z $action ]] && exit

dir_check(){
[[ ! -d "$DOWNLAOD_DIR/$title" ]] && mkdir -p $DOWNLAOD_DIR/$(echo $title | sed 's/[[:space:]]/-/g')
echo "Downloading $title, Episode $EP in $DOWNLAOD_DIR/$(echo $title | sed 's/[[:space:]]/-/g')"
}

stream_this (){
  mpv $(echo $1 | sed 's/"//g') --referrer="$2"  --really-quiet --force-media-title="$title Episode-$EP" & disown
}

download_this(){
    ffmpeg -loglevel error -stats -referer "$2" -i "$(echo $1 | sed 's/"//g')" -c copy "$DOWNLAOD_DIR/$(echo $title | sed 's/[[:space:]]/-/g')/$(echo $title | sed 's/[[:space:]]/-/g')-episode-$EP.mp4" 
}

log_this (){
  echo "$select_animeId-episode-$EP" > $LOGFILE
}

    case $select_quality in
      1)
	if [[ $action = "Play" ]];
	then
	  stream_this "$LINK1" "https://fembed-hd.com/v/$fembed_id"
	  log_this
	else
	dir_check
	download_this "$LINK1" "https://fembed-hd.com/v/$fembed_id"
	fi
	;;
      2)
	if [[ $action = "Play" ]];
	then
	stream_this "$LINK2" "https://fembed-hd.com/v/$fembed_id"
	log_this
	else
	dir_check
	download_this "$LINK2" "https://fembed-hd.com/v/$fembed_id"
	fi
	;;
      3)
	if [[ $action = "Play" ]];
	then
	stream_this "$LINK3" "https://fembed-hd.com/v/$fembed_id"
	log_this
	else
	dir_check
	download_this "$LINK3" "https://fembed-hd.com/v/$fembed_id"
	fi
	;;
      4)
	if [[ $action = "Play" ]];
	then
	stream_this "$video_link_default" "https://animixplay.to"
	log_this
	else
	dir_check
	download_this "$video_link_default" "https://animixplay.to"
	fi
	;;
      *)
	  exit
	;;
    esac

    opt_text="Next Episode $(($EP+1))\nPrevious Episode $(($EP-1))\nSearch Anime\nExit"

    x=$(($EP-1))
    y=$(($EP+1))

    [[ $x = 0 ]] && opt_text="Next Episode $(($EP+1))\nSearch Anime\nExit"
    [[ $y > $total_ep ]] && opt_text="Previous Episode $(($EP-1))\nSearch Anime\nExit"

    opts="$(echo -ne "$opt_text" | $MENU | awk '{print $1}')"
	[[ -z "$opts" ]] && exit
	[[ "$opts" = "Exit" ]] && exit
	[[ "$opts" = "Next" ]] && NP="yes" && PP="" && scrape
	[[ "$opts" = "Previous" ]] && PP="yes" && NP="" && scrape
	[[ "$opts" = "Search" ]] && [[ "$(echo "$MENU" | awk '{print $1}')" = "rofi" ]] && \
	  query="$(rofi -show -drun -theme dmenu -p "Search ")" && scrape
	[[ "$opts" = "Search" ]] && [[ "$(echo "$MENU" | awk '{print $1}')" = "fzf" ]] && \
	  read -r -p "Search " query && scrape

}

[[ -z "$@" ]] && read -r -p "Last Seen: $LW
Search >  " query && \
  MENU="$FZF" scrape && exit || \
  [[ "$1" = "--rofi" ]] && \
  query="$(rofi -dmenu -theme dmenu -p "Last Seen : $LW | Search ")" && \
  MENU="$ROFI" && \
  scrape && exit || \
  query="$@" && \
  MENU="$FZF" && \
  scrape && exit

